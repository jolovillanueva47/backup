//CONVERT THIS CODE PATTERN MATCHING
//def  fibonacci(n: Int):Int =  {
//  if(n == 0)
//    return 0;
//  else if(n == 1)
//    return 1;
//  else
//    return fibonacci(n - 1) + fibonacci(n - 2);
//}

//Solution
def  fibonacci(n: Int):Int = n match  {
  case 0 => 0
  case 1 => 1
  case _ => fibonacci(n - 1) + fibonacci(n - 2);
}
fibonacci(4)

//convert this to tail recursion
//def fact(n: Int) =
//  if(n==0)  1
//  else n*fact(n-1)


//solution
def factorial(number: Int) : Int = {
  def factorialWithAccumulator(accumulator: Int, number: Int) : Int = {
    if (number == 1)
      return accumulator
    else
      factorialWithAccumulator(accumulator * number, number - 1)
  }
  factorialWithAccumulator(1, number)
}
//Convert to tail recursion
//def sum(x: Int) = {
//  var sum: Int = 0
//  for(i <- 0 to x) {
//    sum+=i
//  }
//  sum
//}

//solution
def function(number:Int):Int={

  def summation(acc:Int,number:Int):Int={
    if(number==0)
      return acc;
    else
      summation(acc+number,number-1)
  }
  summation(0,number)
}

function(6)


//currying is like partially applied function where there is a chain

//WHAT DOES THIS FUNCTION ACCOMPLISH? GIVE AN EXAMPLE OF HOW YOU WILL INVOKE
def fzero[A](x: A)(f: A â‡’ Unit): A = { f(x);x }


//Solution:
def output(x:String) = println(x.reverse)
fzero[String]("kobe")(output)
fzero[Int](5)(x=>println(x+4))